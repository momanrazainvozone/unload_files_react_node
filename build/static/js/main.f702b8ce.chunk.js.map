{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","selectedFile","setselectedFile","isFileUplaoded","setisFileUplaoded","uplaodingFile","setuplaodingFile","uploadFile","a","form_data","FormData","append","reqObj","method","url","data","axios","status","CircularProgress","style","marginLeft","marginTop","Alert","severity","color","textAlign","name","type","lastModifiedDate","toDateString","onClick","onChange","event","console","log","target","files","onFileChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAsEeA,MAhEf,WACE,MAAwCC,qBAAxC,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAQMC,EAAU,uCAAG,8BAAAC,EAAA,6DACjBF,GAAiB,IACXG,EAAY,IAAIC,UACZC,OAAO,cAAeV,GAE5BW,EAAS,CACXC,OAAQ,OACRC,IAAK,mCACLC,KAAMN,GARS,SAUGO,IAAMJ,GAVT,OAWK,KAXL,OAWLK,SACVb,GAAkB,GAClBF,EAAgB,MAChBI,GAAiB,IAdF,2CAAH,qDAiBhB,OAAqB,GAAjBD,EACK,cAACa,EAAA,EAAD,CAAkBC,MAAO,CAAEC,WAAY,MAAOC,UAAW,SAG9DpB,EAEA,gCACGE,EACC,cAACmB,EAAA,EAAD,CAAOC,SAAS,UAAUC,MAAM,OAAhC,0DAGE,KACJ,oBAAIL,MAAO,CAAEM,UAAW,UAAxB,gCACA,+CACA,4CAAexB,EAAayB,QAC5B,4CAAezB,EAAa0B,QAC5B,gDAAmB1B,EAAa2B,iBAAiBC,kBACjD,wBAAQC,QAAS,kBAAMvB,KAAvB,sBAKF,gCACGJ,EACC,cAACmB,EAAA,EAAD,CAAOC,SAAS,UAAUC,MAAM,OAAhC,uCAGE,KACJ,oBAAIL,MAAO,CAAEM,UAAW,UAAxB,gCACA,uBACA,0EACA,uBAAOE,KAAK,OAAOI,SAAU,SAACC,GAAD,OArDd,SAACA,GAEpBC,QAAQC,IAAIF,EAAO,SACnB9B,EAAgB8B,EAAMG,OAAOC,MAAM,IAkDSC,CAAaL,UCrD9CM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f702b8ce.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport Alert from \"@mui/material/Alert\";\nimport axios from \"axios\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nfunction App() {\n  const [selectedFile, setselectedFile] = useState();\n  const [isFileUplaoded, setisFileUplaoded] = useState(false);\n  const [uplaodingFile, setuplaodingFile] = useState(false);\n\n  // On file select (from the pop up)\n  const onFileChange = (event) => {\n    // Update the state\n    console.log(event, \"event\");\n    setselectedFile(event.target.files[0]);\n  };\n  const uploadFile = async () => {\n    setuplaodingFile(true);\n    const form_data = new FormData();\n    form_data.append(\"singleImage\", selectedFile);\n\n    let reqObj = {\n      method: \"POST\",\n      url: \"http://localhost:5000/singleFile\",\n      data: form_data,\n    };\n    let results = await axios(reqObj);\n    if (results.status == 200) {\n      setisFileUplaoded(true);\n      setselectedFile(null);\n      setuplaodingFile(false);\n    }\n  };\n  if (uplaodingFile == true) {\n    return <CircularProgress style={{ marginLeft: \"50%\", marginTop: \"10%\" }} />;\n  }\n\n  if (selectedFile) {\n    return (\n      <div>\n        {isFileUplaoded ? (\n          <Alert severity=\"success\" color=\"info\">\n            This is a success alert â€” check it out!\n          </Alert>\n        ) : null}\n        <h1 style={{ textAlign: \"center\" }}>Send File to flask</h1>\n        <h2>File Details:</h2>\n        <p>File Name: {selectedFile.name}</p>\n        <p>File Type: {selectedFile.type}</p>\n        <p>Last Modified: {selectedFile.lastModifiedDate.toDateString()}</p>\n        <button onClick={() => uploadFile()}>Send!</button>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        {isFileUplaoded ? (\n          <Alert severity=\"success\" color=\"info\">\n            File uplaod success fully\n          </Alert>\n        ) : null}\n        <h1 style={{ textAlign: \"center\" }}>Send File to flask</h1>\n        <br />\n        <h4>Choose before Pressing the Upload button</h4>\n        <input type=\"file\" onChange={(event) => onFileChange(event)} />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}